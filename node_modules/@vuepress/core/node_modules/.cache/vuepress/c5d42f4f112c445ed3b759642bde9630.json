{"remainingRequest":"/home/plbkk-monica/Desktop/pupil/other repos/pupil-docs/pupil-docs-website/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/plbkk-monica/Desktop/pupil/other repos/pupil-docs/pupil-docs-website/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/plbkk-monica/Desktop/pupil/other repos/pupil-docs/pupil-docs-website/node_modules/vue-loader/lib/index.js??ref--1-1!/home/plbkk-monica/Desktop/pupil/other repos/pupil-docs/pupil-docs-website/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/plbkk-monica/Desktop/pupil/other repos/pupil-docs/pupil-docs-website/src/invisible/pupil-hardware/htc-vive-add-on.md?vue&type=template&id=08f3478a&","dependencies":[{"path":"/home/plbkk-monica/Desktop/pupil/other repos/pupil-docs/pupil-docs-website/src/invisible/pupil-hardware/htc-vive-add-on.md","mtime":1562305498269},{"path":"/home/plbkk-monica/Desktop/pupil/other repos/pupil-docs/pupil-docs-website/node_modules/cache-loader/dist/cjs.js","mtime":1561001169716},{"path":"/home/plbkk-monica/Desktop/pupil/other repos/pupil-docs/pupil-docs-website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1561001169891},{"path":"/home/plbkk-monica/Desktop/pupil/other repos/pupil-docs/pupil-docs-website/node_modules/cache-loader/dist/cjs.js","mtime":1561001169716},{"path":"/home/plbkk-monica/Desktop/pupil/other repos/pupil-docs/pupil-docs-website/node_modules/vue-loader/lib/index.js","mtime":1561001169891},{"path":"/home/plbkk-monica/Desktop/pupil/other repos/pupil-docs/pupil-docs-website/node_modules/@vuepress/markdown-loader/index.js","mtime":1562298817231}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}